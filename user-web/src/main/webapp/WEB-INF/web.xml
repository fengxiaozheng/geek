<?xml version="1.0" encoding="GBK"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         metadata-complete="true" version="2.5">

    <servlet>
        <servlet-name>default</servlet-name>
        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
        <init-param>
            <param-name>debug</param-name>
            <param-value>0</param-value>
        </init-param>
        <init-param>
            <param-name>listings</param-name>
            <param-value>false</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- The mapping for the default servlet -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>FrontControllerServlet</servlet-name>
        <servlet-class>com.geek.lixw.FrontControllerServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>FrontControllerServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--    <filter>-->
<!--        <filter-name>CharsetEncodingFilter</filter-name>-->
<!--        <filter-class>org.geektimes.projects.user.web.filter.CharsetEncodingFilter</filter-class>-->
<!--        <init-param>-->
<!--            &lt;!&ndash; Filter ÅäÖÃ = FilterConfig &ndash;&gt;-->
<!--            <param-name>encoding</param-name>-->
<!--            <param-value>UTF-8</param-value>-->
<!--        </init-param>-->
<!--    </filter>-->

<!--    <filter-mapping>-->
<!--        <filter-name>CharsetEncodingFilter</filter-name>-->
<!--        <url-pattern>/*</url-pattern>-->
<!--        <dispatcher>REQUEST</dispatcher>-->
<!--        <dispatcher>FORWARD</dispatcher>-->
<!--        <dispatcher>INCLUDE</dispatcher>-->
<!--        <dispatcher>ERROR</dispatcher>-->
<!--    </filter-mapping>-->


    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <page-encoding>UTF-8</page-encoding>
            <include-prelude>/WEB-INF/jsp/prelude/header.jspf</include-prelude>
            <include-coda>/WEB-INF/jsp/coda/footer.jspf</include-coda>
            <trim-directive-whitespaces>true</trim-directive-whitespaces>
        </jsp-property-group>

        <jsp-property-group>
            <url-pattern>*.jspf</url-pattern>
            <page-encoding>UTF-8</page-encoding>
            <include-prelude>/WEB-INF/jsp/prelude/include-taglibs.jspf</include-prelude>
            <include-prelude>/WEB-INF/jsp/prelude/variables.jspf</include-prelude>
            <trim-directive-whitespaces>true</trim-directive-whitespaces>
        </jsp-property-group>
    </jsp-config>

    <welcome-file-list>
        <welcome-file>/</welcome-file>
        <welcome-file>/index</welcome-file>
        <welcome-file>/index.jsp</welcome-file>
    </welcome-file-list>

    <resource-ref>
        <description>DB Connection</description>
        <res-ref-name>jdbc/UserPlatformDB</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>

    <servlet>
        <servlet-name>jolokia-agent</servlet-name>
        <servlet-class>org.jolokia.http.AgentServlet</servlet-class>
        <init-param>
            <description>
                Debugging state after startup. Can be changed via
                the Config MBean during runtime
            </description>
            <param-name>debug</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <description>
                Entries to keep in the history. Can be changed during
                runtime via the config MBean
            </description>
            <param-name>historyMaxEntries</param-name>
            <param-value>10</param-value>
        </init-param>
        <init-param>
            <description>
                Maximum number of entries to keep in the local
                debug history if switched on. Can be change via
                the config MBean during runtime.
            </description>
            <param-name>debugMaxEntries</param-name>
            <param-value>100</param-value>
        </init-param>
        <init-param>
            <description>
                Maximum depth when traversing bean properties.
                If set to 0, depth checking is disabled
            </description>
            <param-name>maxDepth</param-name>
            <param-value>15</param-value>
        </init-param>
        <init-param>
            <description>
                Maximum size of collections returned when
                serializing to JSON. When set to 0
                collections are not truncated.
            </description>
            <param-name>maxCollectionSize</param-name>
            <param-value>0</param-value>
        </init-param>
        <init-param>
            <description>
                Maximum number of objects which is traversed
                when serializing a single response. Use this
                as airbag to avoid boosting your memory and
                network traffic. Nevertheless when set to 0
                not limit is used.
            </description>
            <param-name>maxObjects</param-name>
            <param-value>0</param-value>
        </init-param>
        <init-param>
            <description>
                Options specific for certain application
                server detectors. Detectors can evaluate these
                options and perform a specific initialization based
                on these options. The value is a JSON object with
                the detector's name as key and the options as value.
                E.g. '{glassfish: {bootAmx: false}}' would prevent
                the booting of the AMX subsystem on a glassfish with
                is done by default.
            </description>
            <param-name>detectorOptions</param-name>
            <param-value>{}</param-value>
        </init-param>
        <init-param>
            <description>
                This option specifies in which order the key-value properties within
                ObjectNames as returned by "list" or "search" are returned. By default
                this is the so called 'canonical order' in which the keys are sorted
                alphabetically. If this option is set to "false", then the natural
                order is used, i.e. the object name as it was registered. This option
                can be overridden with a query parameter of the same name.
            </description>
            <param-name>canonicalNaming</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <description>
                Whether to include a stacktrace of an exception in case
                of an error. By default it it set to "true" in which case
                the stacktrace is always included. If set to "false", no
                stacktrace is included. If the value is "runtime" a stacktrace
                is only included for RuntimeExceptions. This global option
                can be overridden with a query parameter.
            </description>
            <param-name>includeStackTrace</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <description>
                When this parameter is set to "true", then an exception thrown
                will be serialized as JSON and included in the response
                under the key "error_value". By default it is "false". This global
                option can be overridden by a query parameter of the same name.
            </description>
            <param-name>serializeException</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <description>
                If discoveryEnabled is set to true, then this servlet will listen
                for multicast discovery request and responds with its agent URL and
                other server specific information. Instead of setting this confog variable,
                discovery can be also enabled via the system property "jolokia.discoveryEnabled"
                or the environment variable "JOLOKIA_DISCOVERY_ENABLED".

                In addition the config parameter "discoveryAgentUrl" can be used to set the the agent's URL.
                By default, auto detection (after the first request was processed by the servlet)) of the URL is used.
                If the URL is set, then discovery is automatically enabled (i.e. there is
                no need to set "discoveryEnabled=true"). This configuration option
                is especially useful if the WAR is used in a proxy setup. Instead of setting the URL
                here, it can be set also either via the system property "jolokia.discoveryAgentUrl" or the
                environment variable "JOLOKIA_DISCOVERY_AGENT_URL".
            </description>
            <param-name>discoveryEnabled</param-name>
            <param-value>false</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>jolokia-agent</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

    <!--
    Security enabled by default. Please update to match you specific security setup (e.g. the auth-method)
    -->
    <login-config>
        <auth-method>BASIC</auth-method>
        <realm-name>jolokia</realm-name>
    </login-config>
</web-app>